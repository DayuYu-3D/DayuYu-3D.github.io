{"version":3,"sources":["webpack:///./src/components/Sidebar/index.js","webpack:///./src/components/Tag/index.js","webpack:///./src/pages/tags.js","webpack:///./src/components/SEO/index.js"],"names":["wordings","githubUrl","googleScholarUrl","email","orcid","iconUrl","about","name","config","Icon","_ref","href","icon","alt","React","createElement","target","rel","className","src","width","height","Sidebar","_ref2","totalCount","latestPosts","Link","to","class","defaultProps","StaticQuery","query","render","data","Object","assign","all","limited","Tag","count","meta","TagPage","allMdx","mapping","edges","forEach","node","tags","frontmatter","Array","from","keys","sort","b","a","style","margin","map","item","key","SEO","title","url","siteTitleAlt","description","isPost","image","Helmet","content","type","JSON","stringify","alternateName","itemListElement","position","headline","schemaOrgJSONLD","property","siteFBAppID","twitter_username"],"mappings":"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","file":"component---src-pages-tags-js-9189e4a0ac61a1a7d11c.js","sourcesContent":["import React from 'react';\nimport { Link, StaticQuery, graphql } from 'gatsby';\nimport PropTypes from 'prop-types';\n\nimport { config } from '../../../data';\n\n// import Information from './Information';\n\nimport './index.scss';\n\nconst {\n  wordings = [],\n  githubUrl,\n  googleScholarUrl,\n  email,\n  orcid,\n  iconUrl,\n  about,\n  name,\n} = config;\n\nconst Icon = ({ href, icon, alt, name }) => (\n  <a\n    target=\"_blank\"\n    href={href}\n    rel=\"external nofollow noopener noreferrer\"\n    className=\"custom-icon\"\n  >\n    <span className=\"fa-layers fa-fw fa-2x\">\n      <img src={icon} alt={alt} width=\"32\" height=\"32\" />\n    </span>\n    {name && <span>{name}</span>}\n  </a>\n);\n\nconst Sidebar = ({ totalCount, latestPosts }) => (\n  <header className=\"intro-header site-heading text-center col-xl-2 col-lg-3 col-xs-12 order-lg-1\">\n    <div className=\"about-me\">\n      <Link to={about} href={about} className=\"name\">\n        <img className=\"avatar\" src={iconUrl} alt={name} />\n        <h4>{name}</h4>\n      </Link>\n      \n      <p class=\"info\">PhD Researcher</p>\n      <p class=\"info\">Wuhan University</p>\n      <hr />\n      <p className=\"mb-1\">{wordings[0]}</p>\n      <p className=\"mb-2\">{wordings[1]}</p>\n      <p className=\"mb-3\">{wordings[2]}</p>\n      {/* <p className=\"mb-1\">{wordings.join(\" \")}</p> */}\n        <Icon\n          href={googleScholarUrl}\n          icon=\"/favicons/google-scholar.svg\"\n          alt=\"google-scholar\"\n        />\n        <Icon\n          href={orcid}\n          icon=\"/favicons/orcid.svg\"\n          alt=\"oricid\"\n        />\n        <Icon \n          href={`mailto:${email}`} \n          icon=\"/favicons/envelope.svg\" \n          alt=\"mailenvelope\"\n        />\n        <Icon\n          href={githubUrl}\n          icon=\"/favicons/github.svg\"\n          alt=\"github\"\n        />\n\n      \n      {/* <Information totalCount={totalCount} posts={latestPosts} /> */}\n\n    </div>\n  </header>\n);\n\nIcon.propTypes = {\n  href: PropTypes.string.isRequired,\n  icon: PropTypes.string.isRequired, // 使用string而不是array\n};\n\nSidebar.propTypes = {\n  totalCount: PropTypes.number,\n  latestPosts: PropTypes.array, //eslint-disable-line\n};\n\nSidebar.defaultProps = {\n  totalCount: 0,\n  latestPosts: [],\n};\n\nexport default () => (\n  <StaticQuery\n    query={graphql`\n      fragment cardData on Mdx {\n        frontmatter {\n          id\n          title\n          url: slug\n          date\n          tags\n          description\n          headerImage\n        }\n      }\n\n      query SidebarQuery {\n        all: allMdx {\n          totalCount\n        }\n\n        limited: allMdx(\n          sort: { order: DESC, fields: frontmatter___date }\n          limit: 6\n        ) {\n          latestPosts: edges {\n            node {\n              ...cardData\n            }\n          }\n        }\n      }\n    `}\n    render={data => <Sidebar {...data.all} {...data.limited} />}\n  />\n);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {Link} from 'gatsby'\nimport './tag.scss';\n\nconst Tag = ({ name, count }) => (\n  <Link to={`/tag/${name}`} className=\"header-tag\">\n    {name}\n    &nbsp;\n    {count}\n  </Link>\n);\n\nTag.propTypes = {\n  name: PropTypes.string.isRequired,\n  count: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n};\n\nTag.defaultProps = {\n  count: '',\n};\n\nexport default Tag;\n","import React from 'react';\nimport { graphql } from 'gatsby';\n\nimport Sidebar from '../components/Sidebar';\nimport Tag from '../components/Tag';\nimport SEO from '../components/SEO';\n\nimport { config } from '../../data';\n\nconst { \n  meta\n } = config;\n\n// eslint-disable-next-line react/prop-types\nconst TagPage = ({ data }) => {\n  const { allMdx } = data;\n\n  const mapping = {};\n\n  allMdx.edges.forEach(({ node }) => {\n    const { tags } = node.frontmatter;\n    tags.forEach((name) => {\n      if (mapping[name]) {\n        mapping[name] += 1;\n      } else {\n        mapping[name] = 1;\n      }\n    });\n  });\n\n  const tags = Array.from(Object.keys(mapping)).sort(\n    (b, a) => mapping[a] - mapping[b],\n  );\n\n  return (\n    <div className=\"container\">\n      <div\n        className=\"row\"\n        style={{\n          margin: 15,\n        }}\n      >\n        <Sidebar />\n\n        <div className=\"col order-2\">\n          {tags.map(item => (\n            <Tag name={item} key={item} count={mapping[item]} />\n          ))}\n        </div>\n      </div>\n      <SEO\n        title=\"标签\"\n        url=\"/tags/\"\n        siteTitleAlt={meta.description}\n        isPost={false}\n        description=\"Tags Page\"\n        image=\"/favicons/default.png\"\n      />\n    </div>\n  );\n};\n\nexport default TagPage;\n\nexport const pageQuery = graphql`\n  query getAllTags {\n    allMdx {\n      edges {\n        node {\n          frontmatter {\n            tags\n          }\n        }\n      }\n    }\n  }\n`;\n","import React from 'react';\nimport Helmet from 'react-helmet';\n\nimport PropTypes from 'prop-types';\n\nimport config from '../../../data';\n\nconst schemaOrgJSONLD = ({\n  url,\n  title,\n  siteTitleAlt,\n  isPost,\n  image,\n  description,\n}) => [\n  {\n    '@context': 'http://schema.org',\n    '@type': 'WebSite',\n    url,\n    name: title,\n    alternateName: siteTitleAlt || '',\n  },\n  isPost\n    ? {\n      '@context': 'http://schema.org',\n      '@type': 'BreadcrumbList',\n      itemListElement: [\n        {\n          '@type': 'ListItem',\n          position: 1,\n          item: {\n            '@id': url,\n            name: title,\n            image,\n          },\n        },\n      ],\n    }\n    : '',\n  isPost\n    ? {\n      '@context': 'http://schema.org',\n      '@type': 'BlogPosting',\n      url,\n      name: title,\n      alternateName: siteTitleAlt || '',\n      headline: title,\n      image: {\n        '@type': 'ImageObject',\n        url: image,\n      },\n      description,\n    }\n    : '',\n];\n\nconst SEO = ({\n  url, title, description, image, siteTitleAlt, isPost,\n}) => (\n  <Helmet>\n    <title>{title}</title>\n\n    {/* General tags */}\n    <meta name=\"description\" content={description} />\n    <meta name=\"image\" content={image} />\n\n    {/* Schema.org tags */}\n    <script type=\"application/ld+json\">\n      {JSON.stringify(schemaOrgJSONLD(url, title, siteTitleAlt, isPost))}\n    </script>\n\n    {/* OpenGraph tags */}\n    <meta property=\"og:url\" content={url} />\n    {isPost ? (\n      <meta property=\"og:type\" content=\"article\" />\n    ) : (\n      <meta property=\"og:type\" content=\"website\" />\n    )}\n    <meta property=\"og:title\" content={title} />\n    <meta property=\"og:description\" content={description} />\n    <meta property=\"og:image\" content={image} />\n    <meta\n      property=\"fb:app_id\"\n      content={config.siteFBAppID ? config.siteFBAppID : ''}\n    />\n\n    {/* Twitter Card tags */}\n    <meta name=\"twitter:card\" content=\"summary_large_image\" />\n    <meta\n      name=\"twitter:creator\"\n      content={config.twitter_username ? config.twitter_username : ''}\n    />\n    <meta name=\"twitter:title\" content={title} />\n    <meta name=\"twitter:description\" content={description} />\n    <meta name=\"twitter:image\" content={image} />\n  </Helmet>\n);\n\nSEO.propTypes = {\n  url: PropTypes.string.isRequired,\n  title: PropTypes.string,\n  description: PropTypes.string.isRequired,\n  image: PropTypes.string.isRequired,\n  siteTitleAlt: PropTypes.string.isRequired,\n  isPost: PropTypes.bool.isRequired,\n};\n\nSEO.defaultProps = {\n  title: config.title,\n};\n\nexport default SEO;\n"],"sourceRoot":""}