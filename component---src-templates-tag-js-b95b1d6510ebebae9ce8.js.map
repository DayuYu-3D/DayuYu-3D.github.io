{"version":3,"sources":["webpack:///./src/components/Sidebar/index.js","webpack:///./src/components/Tag/index.js","webpack:///./src/components/Card/index.js","webpack:///./src/templates/tag.js","webpack:///./src/api/images.js","webpack:///./src/components/SEO/index.js"],"names":["wordings","githubUrl","googleScholarUrl","email","orcid","iconUrl","about","name","config","Icon","_ref","href","icon","alt","React","createElement","target","rel","className","src","width","height","Sidebar","_ref2","totalCount","latestPosts","Link","to","class","defaultProps","StaticQuery","query","render","data","Object","assign","all","limited","Tag","count","CardHeader","url","image","backgroundColor","style","headerImage","color","backgroundImage","parseStaticImg","imageStyle","Card","title","date","headerBackgroundColor","description","tags","split","map","key","meta","TagPage","pageContext","edges","allMdx","tag","margin","fontSize","length","node","frontmatter","id","SEO","siteTitleAlt","isPost","rawImage","match","parseImageTag","text","parseTitle","module","exports","getGalleryImage","Helmet","content","type","JSON","stringify","alternateName","itemListElement","position","item","headline","schemaOrgJSONLD","property","siteFBAppID","twitter_username"],"mappings":"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","file":"component---src-templates-tag-js-b95b1d6510ebebae9ce8.js","sourcesContent":["import React from 'react';\nimport { Link, StaticQuery, graphql } from 'gatsby';\nimport PropTypes from 'prop-types';\n\nimport { config } from '../../../data';\n\n// import Information from './Information';\n\nimport './index.scss';\n\nconst {\n  wordings = [],\n  githubUrl,\n  googleScholarUrl,\n  email,\n  orcid,\n  iconUrl,\n  about,\n  name,\n} = config;\n\nconst Icon = ({ href, icon, alt, name }) => (\n  <a\n    target=\"_blank\"\n    href={href}\n    rel=\"external nofollow noopener noreferrer\"\n    className=\"custom-icon\"\n  >\n    <span className=\"fa-layers fa-fw fa-2x\">\n      <img src={icon} alt={alt} width=\"32\" height=\"32\" />\n    </span>\n    {name && <span>{name}</span>}\n  </a>\n);\n\nconst Sidebar = ({ totalCount, latestPosts }) => (\n  <header className=\"intro-header site-heading text-center col-xl-2 col-lg-3 col-xs-12 order-lg-1\">\n    <div className=\"about-me\">\n      <Link to={about} href={about} className=\"name\">\n        <img className=\"avatar\" src={iconUrl} alt={name} />\n        <h4>{name}</h4>\n      </Link>\n      \n      <p class=\"info\">PhD Researcher</p>\n      <p class=\"info\">Wuhan University</p>\n      <hr />\n      <p className=\"mb-1\">{wordings[0]}</p>\n      <p className=\"mb-2\">{wordings[1]}</p>\n      <p className=\"mb-3\">{wordings[2]}</p>\n      {/* <p className=\"mb-1\">{wordings.join(\" \")}</p> */}\n        <Icon\n          href={googleScholarUrl}\n          icon=\"/favicons/google-scholar.svg\"\n          alt=\"google-scholar\"\n        />\n        <Icon\n          href={orcid}\n          icon=\"/favicons/orcid.svg\"\n          alt=\"oricid\"\n        />\n        <Icon \n          href={`mailto:${email}`} \n          icon=\"/favicons/envelope.svg\" \n          alt=\"mailenvelope\"\n        />\n        <Icon\n          href={githubUrl}\n          icon=\"/favicons/github.svg\"\n          alt=\"github\"\n        />\n\n      \n      {/* <Information totalCount={totalCount} posts={latestPosts} /> */}\n\n    </div>\n  </header>\n);\n\nIcon.propTypes = {\n  href: PropTypes.string.isRequired,\n  icon: PropTypes.string.isRequired, // 使用string而不是array\n};\n\nSidebar.propTypes = {\n  totalCount: PropTypes.number,\n  latestPosts: PropTypes.array, //eslint-disable-line\n};\n\nSidebar.defaultProps = {\n  totalCount: 0,\n  latestPosts: [],\n};\n\nexport default () => (\n  <StaticQuery\n    query={graphql`\n      fragment cardData on Mdx {\n        frontmatter {\n          id\n          title\n          url: slug\n          date\n          tags\n          description\n          headerImage\n        }\n      }\n\n      query SidebarQuery {\n        all: allMdx {\n          totalCount\n        }\n\n        limited: allMdx(\n          sort: { order: DESC, fields: frontmatter___date }\n          limit: 6\n        ) {\n          latestPosts: edges {\n            node {\n              ...cardData\n            }\n          }\n        }\n      }\n    `}\n    render={data => <Sidebar {...data.all} {...data.limited} />}\n  />\n);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {Link} from 'gatsby'\nimport './tag.scss';\n\nconst Tag = ({ name, count }) => (\n  <Link to={`/tag/${name}`} className=\"header-tag\">\n    {name}\n    &nbsp;\n    {count}\n  </Link>\n);\n\nTag.propTypes = {\n  name: PropTypes.string.isRequired,\n  count: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n};\n\nTag.defaultProps = {\n  count: '',\n};\n\nexport default Tag;\n","import React from 'react';\nimport { Link } from 'gatsby';\nimport PropTypes from 'prop-types';\n\nimport Tag from '../Tag';\n\nimport { parseStaticImg } from '../../api/images';\n\nimport './index.scss';\n\nconst imageStyle = (headerImage, color) => ({\n  backgroundColor: `#${color}`,\n  backgroundImage: ` url(${parseStaticImg(headerImage)})`,\n});\n\nconst CardHeader = ({ url, image, backgroundColor }) => (\n  <Link to={url} href={url}>\n    <div className=\"wrapper\" style={imageStyle(image, backgroundColor)} />\n  </Link>\n);\n\nconst Card = ({\n  title,\n  date,\n  url,\n  headerImage,\n  headerBackgroundColor,\n  description,\n  tags = [],\n}) => (\n  <div className=\"col-sm-12 pb-4\">\n    <div className=\"custom-card\">\n      {headerImage && (\n        <CardHeader\n          url={url}\n          image={headerImage}\n          backgroundColor={headerBackgroundColor}\n        />\n      )}\n      <div className=\"data\">\n        <div className=\"content\">\n          <div className=\"stats\">\n            <span className=\"date\">{date.split('T')[0]}</span>\n            {tags.map(name => (\n              <Tag name={name} key={name} />\n            ))}\n          </div>\n          <Link to={url} href={url}>\n            <h4 className=\"title\">{title}</h4>\n          </Link>\n          <p>{description}</p>\n          <Link to={url} href={url}>\n            ....继续阅读全文內容\n          </Link>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  date: PropTypes.string,\n  url: PropTypes.string.isRequired,\n  headerImage: PropTypes.string,\n  headerBackgroundColor: PropTypes.string,\n  description: PropTypes.string.isRequired,\n  tags: PropTypes.arrayOf(PropTypes.string),\n};\n\nCardHeader.propTypes = {\n  url: PropTypes.string.isRequired,\n  image: PropTypes.string,\n  backgroundColor: PropTypes.string,\n};\n\nexport default Card;\n","import React from 'react';\nimport { graphql } from 'gatsby';\nimport Card from '../components/Card';\nimport SEO from '../components/SEO';\nimport Sidebar from '../components/Sidebar';\n\nimport { config } from '../../data';\nconst { \n  meta,\n } = config;\n\n// eslint-disable-next-line react/prop-types\nconst TagPage = ({ data, pageContext }) => {\n  const { edges } = data.allMdx;\n  const { tag } = pageContext;\n  return (\n    <div className=\"container\">\n      <div\n        className=\"row\"\n        style={{\n          margin: 15,\n        }}\n      >\n        <Sidebar />\n\n        <div className=\"col-xl-10 col-lg-7 col-md-12 col-xs-12 order-2\">\n          <div\n            className=\"col-12\"\n            style={{\n              fontSize: 20,\n              margin: 15,\n            }}\n          >\n            {edges.length}\n            &nbsp;Articles in&nbsp;\n            {tag}\n          </div>\n          {edges.map(({ node }) => (\n            <Card {...node.frontmatter} key={node.id} />\n          ))}\n        </div>\n\n        <div className=\"col-xl-2 col-lg-1 order-3\" />\n      </div>\n\n      <SEO\n        title={tag}\n        url={`/tag/${tag}`}\n        siteTitleAlt={meta.description}\n        isPost={false}\n        description={tag}\n        image=\"/favicons/default.png\"\n      />\n    </div>\n  );\n};\n\nexport default TagPage;\n\nexport const pageQuery = graphql`\n  query tagQuery($tag: [String!]) {\n    allMdx(\n      sort: { order: DESC, fields: frontmatter___date }\n      filter: { frontmatter: { tags: { in: $tag } } }\n    ) {\n      edges {\n        node {\n          id\n          frontmatter {\n            id\n            url: slug\n            title\n            date\n            tags\n            headerImage\n            description\n          }\n        }\n      }\n    }\n  }\n`;\n","\nconst parseStaticImg = (rawImage) => {\n\n  if (rawImage.match('(png)|(gif)')) {\n    if (rawImage.match('http')) {\n      return rawImage;\n    }\n    if (rawImage.match('/ImagesAll')) {\n      return rawImage;\n    }\n    if (rawImage.match('/favicons')) {\n      return rawImage;\n    }\t\n  }\n    return '/favicons/default.png';\n};\n\nconst parseTitle = (title, text) => `title=\"${title || text}\"`;\n\nconst parseImageTag = ({ href, title, text }) => `<img class=\"lozad d-block mx-auto\" data-src=${parseStaticImg(\n  href\n)} ${parseTitle(title, text)} />`;\n\nconst getGalleryImage = ({ href, title, text }) => `<a data-fancybox=\"gallery\" href=\"${parseStaticImg(\n  href\n)}\">${parseImageTag({ href, title, text })}</a>`;\n\nmodule.exports = {\n  parseStaticImg,\n  parseImageTag,\n  getGalleryImage,\n};\n","import React from 'react';\nimport Helmet from 'react-helmet';\n\nimport PropTypes from 'prop-types';\n\nimport config from '../../../data';\n\nconst schemaOrgJSONLD = ({\n  url,\n  title,\n  siteTitleAlt,\n  isPost,\n  image,\n  description,\n}) => [\n  {\n    '@context': 'http://schema.org',\n    '@type': 'WebSite',\n    url,\n    name: title,\n    alternateName: siteTitleAlt || '',\n  },\n  isPost\n    ? {\n      '@context': 'http://schema.org',\n      '@type': 'BreadcrumbList',\n      itemListElement: [\n        {\n          '@type': 'ListItem',\n          position: 1,\n          item: {\n            '@id': url,\n            name: title,\n            image,\n          },\n        },\n      ],\n    }\n    : '',\n  isPost\n    ? {\n      '@context': 'http://schema.org',\n      '@type': 'BlogPosting',\n      url,\n      name: title,\n      alternateName: siteTitleAlt || '',\n      headline: title,\n      image: {\n        '@type': 'ImageObject',\n        url: image,\n      },\n      description,\n    }\n    : '',\n];\n\nconst SEO = ({\n  url, title, description, image, siteTitleAlt, isPost,\n}) => (\n  <Helmet>\n    <title>{title}</title>\n\n    {/* General tags */}\n    <meta name=\"description\" content={description} />\n    <meta name=\"image\" content={image} />\n\n    {/* Schema.org tags */}\n    <script type=\"application/ld+json\">\n      {JSON.stringify(schemaOrgJSONLD(url, title, siteTitleAlt, isPost))}\n    </script>\n\n    {/* OpenGraph tags */}\n    <meta property=\"og:url\" content={url} />\n    {isPost ? (\n      <meta property=\"og:type\" content=\"article\" />\n    ) : (\n      <meta property=\"og:type\" content=\"website\" />\n    )}\n    <meta property=\"og:title\" content={title} />\n    <meta property=\"og:description\" content={description} />\n    <meta property=\"og:image\" content={image} />\n    <meta\n      property=\"fb:app_id\"\n      content={config.siteFBAppID ? config.siteFBAppID : ''}\n    />\n\n    {/* Twitter Card tags */}\n    <meta name=\"twitter:card\" content=\"summary_large_image\" />\n    <meta\n      name=\"twitter:creator\"\n      content={config.twitter_username ? config.twitter_username : ''}\n    />\n    <meta name=\"twitter:title\" content={title} />\n    <meta name=\"twitter:description\" content={description} />\n    <meta name=\"twitter:image\" content={image} />\n  </Helmet>\n);\n\nSEO.propTypes = {\n  url: PropTypes.string.isRequired,\n  title: PropTypes.string,\n  description: PropTypes.string.isRequired,\n  image: PropTypes.string.isRequired,\n  siteTitleAlt: PropTypes.string.isRequired,\n  isPost: PropTypes.bool.isRequired,\n};\n\nSEO.defaultProps = {\n  title: config.title,\n};\n\nexport default SEO;\n"],"sourceRoot":""}